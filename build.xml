<?xml version="1.0"?>

<!-- -->
<!DOCTYPE project [
]>
<project name="LAMS_Admin" default="usage" basedir=".">

	<property file="build.properties"/>
	<property file="../lams_build/common.properties"/>
	<property file="../lams_build/${osPropertiesName}.properties" />

	<path id="all-libs">
			<fileset dir="${sharedlib}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${j2eelibs}">
					<include name="**/*.jar"/>
			</fileset>
	</path>

	<path id="project.classpath">
		<path refid="all-libs" />
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}" />
	</path>
	
	<target name="usage">
		<echo message="" />
		<echo message="${name} build file" />
		<echo
			message="------------------------------------------------------" />
		<echo message="" />
		<echo message="Among the available targets are:" />
		<echo message="" />
		<echo message="build    --> build all; don't create JARs" />
		<echo message="alljars  --> create all JAR files" />
		<echo message="tests    --> run tests" />
		<echo message="" />
	</target>

	<target name="init">
		<available property="xdoclet-jars-installed"
			file="lib/xdoclet/xdoclet-${xdoclet.version}.jar" />
	</target>


	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->
	<target name="preparedirs">
		<mkdir dir="${build}" />
		<mkdir dir="${build.classes.java}" />
		<mkdir dir="${build.classes.test}" />
		<mkdir dir="${build.lib}" />
	</target>

	<target name="clean" depends="preparedirs"
		description="removes all class files">
		<delete dir="${build}" quiet="false"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes.java}"/>
		<mkdir dir="${build.classes.test}"/>
		<mkdir dir="${build.lib}"/>
	</target>

	<target name="compile.java" depends="clean"
		description="compile java sources">
		<javac srcdir="${src.java.dir}" compiler="modern"
			destdir="${build.classes.java}" deprecation="on" debug="on">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
		</javac>
	</target>

	<target name="compile.test" depends="compile.java">
		<javac destdir="${build.classes.test}" compiler="modern">
			<src path="${src.test.dir}" />
			<classpath>
				<pathelement location="${build.classes.java}" />
				<path refid="project.classpath" />
			</classpath>
		</javac>
	</target>
	<target name="copyContext" description="copies the applicationContext.xml files to the web directory">
		<copy overwrite="yes" todir="${build.web}">
			<fileset dir="${conf.web.dir}">
				<include name="**/*.xml"/>
				<include name="**/*.tld"/>
			</fileset>
		</copy>
		<copy overwrite="yes" todir="${build.classes.java}/org/lamsfoundation/lams">
				<fileset dir="${src.java.dir}/org/lamsfoundation/lams">
						<include name="**/*.xml"/>
						<include name="**/*.properties"/>
				</fileset>
		</copy>	
	</target>

	<!-- =================================================================== -->
	<!-- Fails if XDoclet 1.2.x is not on classpath                          -->
	<!-- =================================================================== -->
	<target name="fail-if-no-xdoclet-1.2"
		unless="xdoclet-jars-installed">
		<fail>
			You must download several jar files before you can build
			Middlegen. Execute the "download-deps" target. Then try to
			build again.

			If you are behind a proxy, you should define the properties
			http.proxyHost and http.proxyPort. Example:

			ant -Dhttp.proxyHost=foo.com -Dhttp.proxyPort=8080

			It's also possible to download the jars manually.
		</fail>
	</target>

	<!-- ================================================================ -->
	<!-- Make jar archive for deployment        		    	          -->
	<!-- ================================================================ -->
		<target name="build-jar" depends="compile.java,copyContext" description="creates jar file">
			<delete file="${build.lib}/${product}.jar"/>
			<copy overwrite="yes" todir="${build.classes.java}/org/lamsfoundation/lams/admin">
				<fileset dir="${conf.language.dir}">
					<include name="**/*.properties"/>
				</fileset>
			</copy>
			<jar jarfile="${build.lib}/${product}.jar" manifest="${conf.dir}/jar/META-INF/MANIFEST.MF">
				<fileset dir="${build.classes.java}"/>
				<!--<fileset dir="${conf.hibernate.mapping.dir}"/>-->
				<fileset dir="${build.web}"/>
			</jar>
			<copy overwrite="yes" todir="${build.lib}/language/org/lamsfoundation/lams/admin">
				<fileset dir="${conf.language.dir}">
					<include name="**/*.properties"/>
					<include name="**/*.txt"/>
				</fileset>
			</copy>
		</target>
	
	   <!-- =================================================================== -->
	   <!-- Run xdoclet			                                                -->
	   <!-- =================================================================== -->
	   	<taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
		    <classpath refid="all-libs"/>
		</taskdef>
		
		<target name="webdoclet" depends="preparedirs">
			<webdoclet destdir="${generated.java}" force="${xdoclet.force}">

	         <fileset dir="${src.java.dir}">
	            <include name="**/*Action.java" />
	            <include name="**/*Form.java" />
	         </fileset>

	         <deploymentdescriptor servletspec="2.4" distributable="false"
	         	destdir="${conf.webinf.dir}"
				mergedir="${conf.xdoclet.dir}" sessiontimeout="${sessiontimeout}"/>
				
	         <strutsconfigxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.2" />
	         <strutsdynaformvalidationxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.1.3"  />
	      </webdoclet>
	   </target>
	
	   <!-- ================================================ -->
	   <!-- Make the WAR archive for deployment				 -->
	   <!-- ================================================ -->	
		
	   <target name="build-war" depends="webdoclet,build-jar,jsp-plaincopy,jsp-precompile" description="creates war file">
	   		<delete file="${build.lib}/${product}.war"/>	
			<war warfile="${build.lib}/${product}.war" 
	  				webxml="${build.war}/WEB-INF/web.xml" manifest="${conf.dir}/war/META-INF/MANIFEST.MF">
				<fileset dir="${build.war.assembly}">
					<include name="**" />
				</fileset>
			</war>
	   </target>
	
	   <target name="copy-tags" depends="" description="copy the lams.tld and the lams tags">
	   		<copy todir="${conf.webinf.dir}" overwrite="yes" file="${tag.web.dir}/lams.tld" />	
			<copy todir="${conf.webinf.dir}/tags" overwrite="yes">
				<fileset dir="${tag.web.dir}/tags">
					<include name="*.tag" />
				</fileset>
			</copy>
	   </target>
	
	<!-- =================================================================== -->
	<!-- Deploy the jar and war                               -->
	<!-- =================================================================== -->
	<target name="deploy-war" depends="build-war" description="Deploy the Admin war file and jar file">
		<delete quiet="true">
			<fileset dir="${jboss.deploy}/tmp"/>
			<fileset dir="${jboss.deploy}/work"/>
		</delete>
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/> 
		<copy file="${build.lib}/${product}.war"
				todir="${jboss.deploy}"/> 
	</target>
	
	<!-- =================================================================== -->
	<!-- Deploy the jar     -->
	<!-- =================================================================== -->
	<target name="deploy-jar" depends="build-jar" description="Deploy the Admin jar file">
		<delete quiet="true">
			<fileset dir="${jboss.deploy}/tmp"/>
			<fileset dir="${jboss.deploy}/work"/>
		</delete>
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/> 
	</target>

	<!-- =================================================================== -->
	<!-- Run JUnit Tests                                                     -->
	<!-- =================================================================== -->
	<target name="test" depends="compile.test">
		<mkdir dir="${build.report}" />
		<junit printsummary="yes" haltonerror="no" haltonfailure="no"
			fork="yes">
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${build.report}">
				<fileset dir="${src.dir.test}">
					<include name="**/Test*.java" />
					<exclude name="**/Test*All.java" />
					<exclude name="**/TestInitSurveySession.java" />
					<exclude name="**/*Action.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${build.classes.java}" />
				<pathelement location="${build.classes.test}" />
				<!--<pathelement location="${conf.hibernate.mapping.dir}" />-->
				<pathelement location="${conf.web.dir}" />
				<path refid="project.classpath" />
			</classpath>
		</junit>
	</target>

	<target name="test-report" depends="test">
		<mkdir dir="${build.report}/html" />
		<junitreport todir="${build.report}">
			<fileset dir="${build.report}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${build.report}/html" />
		</junitreport>
	</target>


	<!-- =========================================== -->
	<!-- Create/Delete Exploded WAR, Synchronise JSP -->            
	<!-- =========================================== -->
	<target name="delete-exploded-war" description="delete exploded war folder">
		<!-- delete old war folder tree -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/${product}.war">
				<include name="**" />
			</fileset>
		</delete>
		<!-- if use explode tool target when jboss is running, explode may be failed and left the the temp folder. Here try to delete the temp folder -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/temp-${product}.war">
				<include name="**" />
			</fileset>
		</delete>
	</target>

	<target name="explode-war" depends="" description="explode tool jar and war package to a war folder">
		<!-- rename war file to avoid name conflict -->
		<move tofile="${jboss.deploy}/temp-${product}.war" file="${jboss.deploy}/${product}.war" />
		<!-- explode the ear -->
		<!-- Don't explode jar file, becuase classes in jar will conflict with those same classes files in war -->
		<!--<unjar src="${jboss.deploy}/${product}.jar" dest="${jboss.deploy}/${product}.war" />-->
		<unjar src="${jboss.deploy}/temp-${product}.war" dest="${jboss.deploy}/${product}.war" />
		<!-- delete war and jar files -->
		<delete>
			<fileset dir="${jboss.deploy}">
				<include name="temp-${product}.war" />
				<!--<include name="${product}.jar"/>-->
			</fileset>
		</delete>
	</target>

	<target name="synchronize-deploy" description="copy non-java file into deploy folder">
		<copy verbose="yes" todir="${jboss.deploy}/${product}.war">
			<fileset dir="${conf.web.dir}">
				<include name="**/*.jsp" />
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>
	
	<!-- Runs if jsp.precompile setting is set in lams_build/common.properties -->
	<target name="jsp-precompile" if="jsp.precompile">
		<!-- Work on a copy of web files, not originals-->
		<echo>Copying web files</echo>
		<delete dir="${build.war}" quiet="false"/>
	 	<copy overwrite="yes" todir="${build.war}">
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<exclude name="WEB-INF/classes"/>
			</fileset>
	 	</copy>
		
		<!-- Define JSP compiler -->
		<path id="jsp.precompile.classpath">
			<path refid="project.classpath"/>
			<pathelement location="${build.classes.java}"/>
			<fileset dir="${jboss.home}/lib">
				<include name="jboss-common-core.jar" />
				<include name="jboss-logging-spi.jar" />
			</fileset>
			<fileset dir="${jboss.ear.deployers}/jbossweb.deployer">
				<include name="*.jar" />
			</fileset>
	        <fileset dir="${jboss.ear.deploy}/jbossweb.sar">
	            <include name="jbossweb.jar" />
	        </fileset>
		</path>
		<taskdef classname="org.apache.jasper.JspC" name="jasper2" classpathref="jsp.precompile.classpath" />
		
		<!-- Generate Java files and put servlet mappings in web.xml file -->
		<echo>Generating Java source from JSP pages</echo>
		<jasper2 uriroot="${build.war}"
			webXmlFragment="${build.war}/WEB-INF/generated_web.xml"
			outputDir="${build.war}/WEB-INF/src"
			package="${jsp.java.src.package}"
			addWebXmlMappings="true" validateXml="false" failOnError="true"
		/>
		
		<!-- Compile main Java source as some JSPs refer to it
		Uncomment if you get "class not found" errors when precompiling JSPs
		<antcall target="compile-java"/>
		-->
		
		<!-- Compile Java files generated from JSPs -->
		<echo>Compiling JSP classes</echo>
		
		<!-- Make src folder if it does not exist i.e. no JSPs were compiled in previous step -->
		<mkdir dir="${build.war}/WEB-INF/src"/>
		<mkdir dir="${build.war}/WEB-INF/classes"/>
	    <javac destdir="${build.war}/WEB-INF/classes"
	           optimize="on"
	           debug="off" failonerror="true"
	           srcdir="${build.war}/WEB-INF/src" 
		  	   excludes="**/*.smap"
	    	   classpathref="jsp.precompile.classpath">
	      <include name="**" />
	      <exclude name="tags/**" />
	    </javac>
		
		<!-- Prepare files for WAR, exclude plain JSP and tags -->
		<echo>Copying web resources</echo>
		<copy todir="${build.war.assembly}">	
			<fileset dir="${build.war}">
				<include name="**"/>
				<exclude name="WEB-INF/src/"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="**/*.java"/>
				<exclude name="**/*.jsp"/>
				<exclude name="**/*.tag"/>
				<exclude name="**/*.tld"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
		</copy>
		
	 	<copy todir="${build.war.assembly}/WEB-INF/lib" flatten="true" failonerror="false">
			<fileset dir="${basedir}/lib">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>
					
	<!-- Runs if jsp.precompile setting is NOT set in lams_build/common.properties 
		 JSPs will be compiled at runtime, which is default behaviour allowing hotdeploy -->
	<target name="jsp-plaincopy" unless="jsp.precompile">
		<delete dir="${build.war}" quiet="false"/>
		
		<echo>Copying web resources</echo>
	 	<copy todir="${build.war}">
			<fileset dir="${conf.web.dir}">
				<include name="WEB-INF/web.xml"/>
			</fileset>
	 	</copy>
		
	 	<copy todir="${build.war.assembly}">
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="WEB-INF/classes"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
	 	</copy>
		
	 	<copy todir="${build.war.assembly}/WEB-INF/lib" flatten="true" failonerror="false">
			<fileset dir="${basedir}/lib">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>
</project>
